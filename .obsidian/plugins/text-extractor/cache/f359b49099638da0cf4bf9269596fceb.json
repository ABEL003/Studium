{"path":"1.Semester/Mathematik Aalen/Blatt 4 Lösungen_Simon Feldmann.pdf","text":"Blatt 4 Aufgabe 1 (1) x (1/2) y (2/3) m= y2− y1 x2−x1 ← Steigung errechnen f (x)=3−2 2−1 =1 f (x)=1 x +b → Punkt einsetzten → 2=1+ b→b=1 f (x)=x +1 (2) import matplotlib.pyplot as plt # Berechnung der Steigung (m) m = (y2 - y1) / (x2 - x1) # Verwendung der Punkt-Steigungsform: y - y1 = m(x - x1) # Umformung zu y = mx + (y1 - m * x1) equation = f\"y = {m}x + ({y1 - m * x1})\" # Erstellen von x- und y-Werten für die Linie x_values = [1,2] y_values = [2,3] # Erstellen des Diagramms und Hinzufügen der Linie plt.figure() plt.plot(x_values, y_values, marker='o', label='Punkte') plt.plot(x_values, [m * x + (y1 - m * x1) for x in x_values], label='Linie durch Punkte') plt.xlabel('x') plt.ylabel('y') plt.title(f'Punkt-Steigungsform: {equation}') plt.legend() plt.grid(True) # Anzeigen des Diagramms plt.show() Aufgabe 2 (1) V =( 1 1 1 2 1 3) V 2=( 1 1 1 1 2 3) ⃗y=( 2 3 4) ( 1 1 1 1 2 3)∗( 1 1 1 2 1 3) =( 3 6 6 14) ( 1 1 1 1 2 3)∗( 2 3 4) =( 9 20) ( 3 6 6 14] 9 20 → II−2∗1→ ( 3 6 0 2] 9 2 3 a1+6 a 2=9 2 a2=2 a 2=1 3 a1=9−6∗1=3 a 1=1 a=( 1 1) p(x )=x+ 1 (2) import matplotlib.pyplot as plt import numpy as np # Funktion zur Berechnung der Punktsteigungsform def punktsteigungsform(x1, y1, x2, y2, x3, y3): # Berechne die Steigung m m = ((y2 - y1) / (x2 - x1) + (y3 - y2) / (x3 - x2)) / 2 # Verwende den ersten Punkt, um den y-Achsenabschnitt b zu berechnen b = y1 - m * x1 # Gib die Steigung und den y-Achsenabschnitt zurück return m, b # Gegebene Punkte x1, y1 = 1, 2 x2, y2 = 2, 3 x3, y3 = 3, 4 # Berechne die Steigung und den y-Achsenabschnitt m, b = punktsteigungsform(x1, y1, x2, y2, x3, y3) print(\"Steigung (m):\", m) print(\"y-Achsenabschnitt (b):\", b) # Erstelle Werte für die Regressionsgerade x_values = np.linspace(min(x1, x2, x3), max(x1, x2, x3), 100) y_values = m * x_values + b # Visualisiere die Punkte und die Regressionsgerade plt.scatter([x1, x2, x3], [y1, y2, y3], color='red', label='Gegebene Punkte') plt.plot(x_values, y_values, label=f'Regressionsgerade: y = {m:.2f}x + {b:.2f}') plt.xlabel('X-Achse') plt.ylabel('Y-Achse') plt.title('Regressionsgerade mit Punktsteigungsform') plt.legend() plt.grid(True) plt.show() Aufgabe 3 (1) V =( 1 1 12 1 2 22 1 3 3 2) =( 1 1 1 1 2 4 1 3 9) V T =( 1 1 4 1 2 9 1 3 16) ⃗y=( 2 3 4) ( 1 1 1 1 2 3 1 4 9) ∗( 1 1 1 1 2 4 1 3 9) =( 1 ⋅1+1⋅1+1 ⋅1 1 ⋅1+1⋅2+1 ⋅3 1⋅1+1 ⋅4+ 1⋅9 1 ⋅1+ 2⋅1+3 ⋅1 1 ⋅1+ 2⋅2+3 ⋅3 1⋅1+2 ⋅4+3 ⋅9 1 ⋅1+ 4 ⋅1+9 ⋅1 1 ⋅1+ 4 ⋅2+9 ⋅3 1 ⋅1+4 ⋅4+9 ⋅9) =( 3 6 14 6 14 36 14 36 98) ( 1 1 1 1 2 3 1 4 9) ∗( 2 3 4) =( 1∗2+1∗3+1∗4 1∗2+2∗3+3∗4 1∗2+4∗3+9∗4) =( 9 20 50) ( 3 6 14 6 14 36 14 36 98] 9 20 50 → II−2∗I →( 3 6 14 0 2 8 14 36 98] 9 2 50 → III−( −14 3)∗I →( 3 6 14 0 2 8 0 8 98 2] 9 2 8→ III−(−4 )∗II → ( 3 6 14 0 2 8 0 0 2 3] 9 2 0 3 ⋅x 1+6 ⋅x 2+14 ⋅x 3=9 2 ⋅x 2+8 ⋅x 3=2 2 3 ⋅x 3=0 2 3 x3=0 x3=0 2∗x2=2−8∗x3=2−8∗0=2 x2=1 3∗x1=9−6∗x2−14∗x3=9−6∗1−14∗0=3 x1=1 p(x )=x+ 1 (2) import matplotlib.pyplot as plt import numpy as np # Gegebene Punkte x = np.array([1,2,3]) y = np.array([2,3,4]) # Berechne das Ausgleichspolynom dritten Grades coefficients = np.polyfit(x, y, 3) p = np.poly1d(coefficients) # Erstelle Werte für die Ausgleichspolynom-Funktion x_values = np.linspace(min(x), max(x), 100) y_values = p(x_values) # Visualisiere die Punkte und das Ausgleichspolynom plt.scatter(x, y, color='red', label='Gegebene Punkte') plt.plot(x_values, y_values, label=f'Ausgleichspolynom', color='blue') plt.xlabel('X-Achse') plt.ylabel('Y-Achse') plt.title('Ausgleichspolynom dritten Grades mit gegebenen Punkten') plt.legend() plt.grid(True) plt.show() Aufgabe 4 V =( 1 0 0 2 03 1 1 1 2 1 3 1 2 2 2 23 1 3 3 2 33) =( 1 0 0 0 1 1 1 1 1 2 4 8 1 3 9 27) V T =( 1 1 1 1 0 1 2 3 0 1 4 9 0 1 8 27) ⃗y=( 1 2 3 4) ( 1 1 1 1 0 1 2 3 0 1 4 9 0 1 8 27) ∗( 1 0 0 0 1 1 1 1 1 2 4 8 1 3 9 27) =( 4 6 14 36 6 14 36 98 14 36 98 276 36 98 276 794) ( 1 1 1 1 1 2 3 4 0 1 4 9 0 1 8 27) ∗( 1 2 3 4) =( 10 20 50 134) ( 4 6 14 36 6 14 36 98 14 36 98 276 36 98 276 794] 10 20 50 134 → II−( 3 2)∗I →( 4 6 14 36 0 5 15 44 14 36 98 276 36 98 276 794] 10 5 50 134 → III−( 7 2)∗I → ( 4 6 14 36 0 5 15 44 0 15 49 150 36 98 276 794] 10 5 15 134 → IV −9∗I →( 4 6 14 36 0 5 15 44 0 15 49 150 0 44 150 470] 10 5 15 44 → III−3∗II → ( 4 6 14 36 0 5 15 44 0 0 4 18 0 44 150 470] 10 5 0 44 → IV −( −44 5)∗II →( 4 6 14 36 0 5 15 44 0 0 4 18 0 0 18 414 5] 10 5 0 0 → IV −( 9 2)∗III → ( 4 6 14 36 0 5 15 44 0 0 4 18 0 0 0 9 5] 10 5 0 0 4 a1+6 a 2+14 a3+36 a 4=10 5 a2+15 a3+ 44 a 4=5 4 x3+18 a 4=0 9 5 x 4=0 9 5∗x4=0 x4=0 4∗x3=−18∗x4=−18∗0=0 x3=0 5∗x2=5−15∗x3−44∗x 4=5−15∗0−44∗0=5 x2=1 4∗x1=10−6∗x2−14∗x3−36∗x4=10−6∗1−14∗0−36∗0=4 x1=1 p(x )=1+1 x +0 x2+0 x3=x+ 1 (2) import matplotlib.pyplot as plt import numpy as np # Gegebene Punkte x = np.array([0, 1, 2, 3]) y = np.array([1, 2, 3, 4]) # Berechne das Ausgleichspolynom dritten Grades coefficients = np.polyfit(x, y, 3) p = np.poly1d(coefficients) # Erstelle Werte für die Ausgleichspolynom-Funktion x_values = np.linspace(min(x), max(x), 100) y_values = p(x_values) # Visualisiere die Punkte und das Ausgleichspolynom plt.scatter(x, y, color='red', label='Gegebene Punkte') plt.plot(x_values, y_values, label=f'Ausgleichspolynom', color='blue') plt.xlabel('X-Achse') plt.ylabel('Y-Achse') plt.title('Ausgleichspolynom dritten Grades mit gegebenen Punkten') plt.legend() plt.grid(True) plt.show()","libVersion":"0.3.1","langs":""}